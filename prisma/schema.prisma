// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum OrderStatus {
  CANCEL
  SUCCESS
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum CourseType {
  COMBO
  SINGLE
}

enum CourseEnrollmentStatus {
  ACTIVE
  BLOCKED
}

enum CouponType {
  PERCENT
  FIXED
}

model User {
  id            Int       @id @default(autoincrement())
  role          Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roleId        Int
  email         String    @unique
  fullName      String
  password      String
  status        UserStatus @default(ACTIVE)
  benefits      String[]   @default([])
  cartItems     CartItem[]   @relation("UserCart")

  createdBy     User?     @relation("UserCreatedUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdById   Int?
  updatedBy     User?     @relation("UserUpdatedUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById   Int?
  deletedBy     User?     @relation("UserDeletedUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById   Int?

  createdUsers  User[]    @relation("UserCreatedUsers")
  updatedUsers  User[]    @relation("UserUpdatedUsers")
  deletedUsers  User[]    @relation("UserDeletedUsers")

  sessionTokens SessionToken[]
  orders        Order[]     @relation("OrderUser")
  courses       Course[]   @relation("CourseCreators")
  updatedCourses Course[]  @relation("CourseUpdatedUsers")
  deletedCourses Course[]  @relation("CourseDeletedUsers")
  chapters      Chapter[]  @relation("ChapterCreators")
  lessons       Lesson[]   @relation("LessonCreators")
  courseEnrollments CourseEnrollment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@index([email])
  @@index([status])
}

model Role {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String        @db.VarChar(500) @default("")
  isActive      Boolean       @default(true)

  users         User[]

  permissions   Permission[]  @relation("RolePermissions")

  createdById   Int?
  updatedById   Int?
  deletedById   Int?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
}

model Permission {
  id            Int           @id @default(autoincrement())
  name          String
  description   String        @db.VarChar(500) @default("")
  path          String
  method        HTTPMethod
  module        String        @db.VarChar(500) @default("")

  roles         Role[]        @relation("RolePermissions")

  createdById   Int?
  updatedById   Int?
  deletedById   Int?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  @@unique([path, method])
}

model SessionToken {
  token       String    @id
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@index([expiresAt])
}

model Course {
  id            Int       @id @default(autoincrement())
  title         String
  description   String    @db.VarChar(500) @default("")
  courseType    CourseType
  slug          String
  price         Int       @default(0)
  isDraft       Boolean   @default(true)
  discount      Int       @default(0)
  image         String    
  video         String?
  duration      Int       @default(0)

  comboChildren Course[] @relation("ComboCourses")
  // Là khóa con thuộc nhiều combo
  comboParents  Course[] @relation("ComboCourses")

  cartItems          CartItem[]

  createdBy     User?     @relation("CourseCreators", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdById   Int?
  updatedBy     User?     @relation("CourseUpdatedUsers", fields: [updatedById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById   Int?
  deletedBy     User?     @relation("CourseDeletedUsers", fields: [deletedById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deletedById   Int?

  chapters      Chapter[]
  courseEnrollments CourseEnrollment[]
  orders        Order[]
  snapshots     OrderItemSnapshot[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@unique([slug])
  @@index([slug])
  @@index([courseType])
  @@index([isDraft])
}

model Chapter {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  order         Int
  isDraft       Boolean   @default(true)
  course        Course    @relation(fields: [courseId], references: [id])
  courseId      Int

  createdBy     User?     @relation("ChapterCreators", fields: [createdById], references: [id])
  createdById   Int?
  updatedById   Int?
  deletedById   Int?

  lessons       Lesson[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Lesson {
  id            Int       @id @default(autoincrement())
  title         String
  description   String    @default("")
  order         Int
  videoUrl      String?
  duration      Int       @default(0)
  isDraft       Boolean   @default(true)
  chapter       Chapter   @relation(fields: [chapterId], references: [id])
  chapterId     Int
  key           String?    

  createdBy     User?     @relation("LessonCreators", fields: [createdById], references: [id])
  createdById   Int?
  updatedById   Int?
  deletedById   Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

}

model CourseEnrollment {
  id            Int       @id @default(autoincrement())
  course        Course    @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseId      Int
  user          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        Int

  status        CourseEnrollmentStatus @default(ACTIVE)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([courseId, userId])
  @@index([status])
}

model Order {
  id            Int         @id @default(autoincrement())
  user          User        @relation("OrderUser", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId        Int
  status        OrderStatus
  coupon        Coupon?     @relation(fields: [couponCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  couponCode    String?
  snapshots     OrderItemSnapshot[]

  courses       Course[]

  payment       Payment?    @relation("OrderPayment")

  createdById   Int?
  updatedById   Int?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  @@index([userId])
  @@index([status])
}

model OrderItemSnapshot {
  id            Int         @id @default(autoincrement())
  order         Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  orderId       Int?
  coupon        Coupon?     @relation(fields: [couponCode], references: [code], onDelete: SetNull, onUpdate: NoAction)
  couponCode    String?
  course        Course?     @relation(fields: [courseId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  courseId      Int?
  courseImage   String?
  courseTitle   String?
  coursePrice   Int?
  courseDiscount Int?
  courseType    CourseType?

  couponDiscount Int?
  couponType    CouponType?
  couponStartAt DateTime?
  couponEndAt   DateTime?
  
  createdAt     DateTime    @default(now())

  @@index([orderId])
  @@index([couponCode])
  @@index([courseId])
  @@index([createdAt])  
}

model Payment {
  id                  Int       @id @default(autoincrement())
  orderId             Int       @unique
  order               Order     @relation("OrderPayment", fields: [orderId], references: [id])
  gateway             String
  transactionDate     DateTime  @default(now())
  accountNumber       String
  subAccount          String?
  amountIn            Int       @default(0)
  amountOut           Int       @default(0)
  accumulated         Int       @default(0)
  code                String?
  transactionContent  String?
  referenceNumber     String?
  body                String?

  createdAt           DateTime  @default(now())

  @@index([orderId])
}


model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, type])
  @@index([expiresAt])
}

model CartItem {
  id            Int       @id @default(autoincrement())
  user          User      @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId        Int               
  
  courseId      Int
  course        Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])

}

model Coupon {
  code String @id
  discount Int
  startAt DateTime
  endAt DateTime
  isActive Boolean @default(true)

  orderss     Order[]
  snapshots   OrderItemSnapshot[]

  couponType CouponType

  createdById   Int?
  updatedById   Int?
  deletedById   Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@unique([code])
  @@index([startAt, endAt])
  @@index([isActive])
}